javascript:
  var data = {
   series: [#{@quiz.correct_answers}, #{@quiz.total_questions - @quiz.correct_answers}]
  };

  var sum = function(a, b) { return a + b };

  var chart = new Chartist.Pie('.quiz-chart', {
    series: data.series
  }, {
    donut: true,
    showLabel: true,
    height: '400px',
    donutWidth: '70px',
    labelInterpolationFnc: function(value) {
      return Math.round(value / data.series.reduce(sum) * 100) + '%';
    }
  });

  chart.on('draw', function(data) {
    if(data.type === 'slice') {
      // Get the total path length in order to use for dash array animation
      var pathLength = data.element._node.getTotalLength();

      // Set a dasharray that matches the path length as prerequisite to animate dashoffset
      data.element.attr({
        'stroke-dasharray': pathLength + 'px ' + pathLength + 'px'
      });

      // Create animation definition while also assigning an ID to the animation for later sync usage
      var animationDefinition = {
        'stroke-dashoffset': {
          id: 'anim' + data.index,
          dur: 1000,
          from: -pathLength + 'px',
          to:  '0px',
          easing: Chartist.Svg.Easing.easeOutQuint,
          // We need to use `fill: 'freeze'` otherwise our animation will fall back to initial (not visible)
          fill: 'freeze'
        }
      };

      // If this was not the first slice, we need to time the animation so that it uses the end sync event of the previous animation
      if(data.index !== 0) {
        animationDefinition['stroke-dashoffset'].begin = 'anim' + (data.index - 1) + '.end';
      }

      // We need to set an initial value before the animation starts as we are not in guided mode which would do that for us
      data.element.attr({
        'stroke-dashoffset': -pathLength + 'px'
      });

      // We can't use guided mode as the animations need to rely on setting begin manually
      // See http://gionkunz.github.io/chartist-js/api-documentation.html#chartistsvg-function-animate
      data.element.animate(animationDefinition, false);
    }
  });

  // Prevent chart re-draw when scrolling down on a mobile screen,
  // see https://github.com/gionkunz/chartist-js/issues/410
  chart.on('created', function(){
    chart.detach(); // it will detach resize and media query listeners
  });

  //then update the chart only when window.width() changes
  var width = $(window).width();
  $(window).resize(function() {
    if($(window).width() != width) {
      width = $(window).width(); // update the width width
      chart.update();
    }
  });
